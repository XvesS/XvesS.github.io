<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AutoDock分子对接入门（1）</title>
      <link href="/2024/02/29/AutoDock%E5%88%86%E5%AD%90%E5%AF%B9%E6%8E%A5%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
      <url>/2024/02/29/AutoDock%E5%88%86%E5%AD%90%E5%AF%B9%E6%8E%A5%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>蛋白分子对接对于解析蛋白质-底物的作用机理必不可少，今天看了一天的AutoDock文档大概弄清楚怎么个使用流程了，现在记录一下。（后边不定期更新）</p><span id="more"></span><h3 id="1、什么是AutoDock"><a href="#1、什么是AutoDock" class="headerlink" title="1、什么是AutoDock"></a>1、什么是AutoDock</h3><p>先贴一段官网的描述：</p><blockquote><p>AutoDock is a suite of automated docking tools.  It is designed to predict how small molecules, such as substrates or drug candidates, bind to a receptor of known 3D structure.  Over the years, it has been modified and improved to add new functionalities, and multiple engines have been developed.</p><p>Current distributions of AutoDock consist of two generations of software: AutoDock 4 and AutoDock Vina.  More recently, we developed AutoDock-GPU, an accelerated version of AutoDock4 that is hundreds of times faster than the original single-CPU docking code.</p><p>AutoDock 4 actually consists of two main programs: autodock performs the docking of the ligand to a set of grids describing the target protein;  autogrid pre-calculates these grids.</p><p>In addition to using them for docking, the atomic affinity grids can be visualised.  This can help, for example, to guide organic synthetic chemists design better binders.</p><p>AutoDock Vina does not require choosing atom types and pre-calculating grid maps for them.  Instead, it calculates the grids internally, for the atom types that are needed, and it does this virtually instantly.</p><p>We have also developed a graphical user interface called AutoDockTools, or ADT for short, which amongst other things helps to set up which bonds will treated as rotatable in the ligand and to analyze dockings.</p></blockquote><p>大致意思就是现在的AutoDock有AutoDock4和AutoDock Vina两个版本，还有一个GPU版本据说可以加快计算速度上百倍（我没试过就不说了）。然后有一个软件叫做AutoDock Tools（ADT）,简而言之就是可以帮助我们生成AutoDock4和AutoDock Vina程序的输入文件并帮助我们分析对接结果的一个软件。</p><h3 id="2、AutoDock-Vina"><a href="#2、AutoDock-Vina" class="headerlink" title="2、AutoDock Vina"></a>2、AutoDock Vina</h3><p>考虑到后边可能会大批量的做分子对接，所以我选择使用Vina,因为它和python绑定，可以和容易的使用python编程操控分子对接（另外据说速度会比AD4快一百倍，但是我没测试过）。<br><strong>2.1 准备工作</strong><br>首先我们需要安装两个软件套装ADFR和Meeko，目的是对输入文件进行处理  </p><ul><li><a href="https://ccsb.scripps.edu/adfr/downloads">ADFR软件下载</a><br>Meeko是一个python包，所以直接<code>pip</code>安装就行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install -U numpy openbabel meeko</span><br></pre></td></tr></table></figure>然后安装Vina,直接<code>pip</code>安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install -U numpy vina</span><br></pre></td></tr></table></figure><strong>2.2 receptor预处理</strong><br>文档上叫receptor，我的理解就是对接的两个物体中较大的一个，直接就理解为蛋白质就好了。<br>首先我们需要蛋白质的结构文件，一般来说是PDB（可能其他格式的结构文件也行，但是我没试过），然后我们需要把PDB文件处理成Vina能够处理的文件类型，这时候就需要用到<code>prepare_receptor</code>这个命令将PDB文件转换成PDBQT格式的文件，要注意的是，PDB文件里边应该包含所有的氢原子，有很多软件都可以完成这个我就不说了，当然你也可以在命令中添加<code>-A &quot;hydrogens&quot;</code>添加氢原子。还有一个值得注意的就是PDB文件里应该只包含蛋白质的信息，如果有配体、辅因子、离子之类的是不行的，所以要在PDB文件中删除（直接用记事本打开删了就完了）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ prepare_receptor -r example_receptorH.pdb -o example_receptor.pdbqt</span><br></pre></td></tr></table></figure>其他可选参数可以输入<code>prepare_receptor -h</code>查看</li></ul><p><strong>2.3 ligand预处理</strong><br>也是一样，都要求加氢原子，不同的是我们使用<code>mk_prepare_ligand.py</code>命令，然后小分子的格式可以有很多种包括MOL&#x2F;MOL2&#x2F;SDF。然后最好不要使用PDB格式的文件，因为它不包含键连接的信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mk_prepare_ligand.py -i example_ligand.sdf -o example_ligand.pdbqt</span><br></pre></td></tr></table></figure><h3 id="3、对接"><a href="#3、对接" class="headerlink" title="3、对接"></a>3、对接</h3><p>接下来就是激动人性的对接了，首先选择力场，一般来说有两种：AutoDock4 forcefield和Vina forcefield。所以就分别讲一讲。<br><strong>3.1 AutoDock 4力场</strong><br>要使用AD4力场的化我们还得先生成affinity maps，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pythonsh prepare_gpf.py -l example_ligand.pdbqt -r example_receptor.pdbqt -y</span><br><span class="line">$ autogrid4 -p example_receptor.gpf -l example_receptor.glg</span><br></pre></td></tr></table></figure><p>然后你就会得到下面这些文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example_receptor.maps.fld       # grid data file</span><br><span class="line">example_receptor.*.map          # affinity maps for A, C, HD, H, NA, N, OA atom types</span><br><span class="line">example_receptor.d.map          # desolvation map</span><br><span class="line">example_receptor.e.map          # electrostatic map</span><br></pre></td></tr></table></figure><p>然后执行对接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vina  --ligand example_ligand.pdbqt --maps example_receptor --scoring ad4 \</span><br><span class="line">        --exhaustiveness 32 --out example_ligand_ad4_out.pdbqt</span><br></pre></td></tr></table></figure><p>完成后程序将写入一个名为example_ligand_ad4_out的PDBQT文件。PDBQT包含在分子对接过程中发现的所有姿态。</p><p><strong>3.2 Vina 力场</strong><br>与AutoDock4相反，在使用Vina力场时，不需要使用autogrid4预先计算affinity maps。AutoDock Vina在对接之前会在内部计算这些数据。但是仍然需要指定网格空间的中心和尺寸(以埃为单位)，以及受体。不使用参数——center_x，——center_y，——center_z和——size_x，——size_y，——size_z来指定网格框的每个参数，而是将所有这些信息存储在一个文本文件example_receitor_vina_box.txt中。如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">center_x = 15.190</span><br><span class="line">center_y = 53.903</span><br><span class="line">center_z = 16.917</span><br><span class="line">size_x = 20.0</span><br><span class="line">size_y = 20.0</span><br><span class="line">size_z = 20.0</span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vina --receptor example_receptor.pdbqt --ligand example_ligand.pdbqt \</span><br><span class="line">       --config example_receptor_vina_box.txt \</span><br><span class="line">       --exhaustiveness=32 --out example_ligand_vina_out.pdbqt</span><br></pre></td></tr></table></figure><p> 大功告成！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样使用hexo+github搭建个人博客</title>
      <link href="/2024/02/27/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/02/27/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>零基础小白从零开始搭建属于自己的个人博客</p><span id="more"></span><h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先准备好环境依赖，安装 Node.js 和 Git。</p><ul><li><a href="https://nodejs.org/">Node.js下载</a></li><li><a href="https://git-scm.com/">Git下载</a></li></ul><p>上面两个链接点击进去按照要求下载下来直接安装就好了</p><h3 id="2、和github连接"><a href="#2、和github连接" class="headerlink" title="2、和github连接"></a>2、和github连接</h3><p>我们使用github免费的静态托管仓库让我们的博客可以让其他人进行访问<br>首先打开git bash设置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;,  </span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p><strong>创建SSH连接的密钥</strong><br>win+r输入cmd打开终端，输入ssh-keygen -t rsa -C “你的邮箱”,接着一路回车确认就行，生成的地址就在<code>C:\Users\用户名\.ssh</code>文件夹下<br><strong>连接github</strong><br>使用你的邮箱注册<a href="https://github.com/">Github</a>账号，找到<code>Settings</code>页面如下：<br><img src="/2024/02/27/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/github_settings.png" alt="github settings 界面"><br>点击上图中的 <code>New SSH key</code> 添加密钥，<code>title</code>随便填，将<code>C:\Users\用户名\.ssh\id_rsa.pub</code>里的内容复制到<code>key</code>中，最后<code>Add SSH key</code>就完事了<br><strong>连接验证</strong><br>打开Git Bash, 输入<code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认，显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h3 id="3、创建github-pages仓库"><a href="#3、创建github-pages仓库" class="headerlink" title="3、创建github pages仓库"></a>3、创建github pages仓库</h3><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 用户名.github.io</li><li>勾选 “Initialize this repository with a README”</li></ul><p>其他随便填就行，点击创建，然后博客地址就是<code>https://用户名.github.io</code></p><h3 id="4、安装Hexo博客程序"><a href="#4、安装Hexo博客程序" class="headerlink" title="4、安装Hexo博客程序"></a>4、安装Hexo博客程序</h3><p>新建一个文件夹用来存放博客，然后打开命令行cd进这个文件<br>然后使用npm安装hexo程序:<code>npm install -g hexo-cli</code><br>完成后进行初始化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init # 初始化</span><br><span class="line">npm install # 安装必要的依赖</span><br></pre></td></tr></table></figure><p>完成后可以启动服务进行预览</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g # 生成页面</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>访问提示的网址就可以看到hexo的默认页面</p><h3 id="5、将Hexo部署到Github-Pages"><a href="#5、将Hexo部署到Github-Pages" class="headerlink" title="5、将Hexo部署到Github Pages"></a>5、将Hexo部署到Github Pages</h3><p>安装<strong>hexo-deployer-git</strong>：<br><code>npm install hexo-deployer-git --save</code><br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>然后使用 <code>hexo d</code>部署到github上，这个时候访问<code>https://用户名.github.io</code>就可以看到 Hexo 网站了。</p><h3 id="6、常用命令和设置"><a href="#6、常用命令和设置" class="headerlink" title="6、常用命令和设置"></a>6、常用命令和设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g # 生成页面</span><br><span class="line">hexo d # 推送到github</span><br><span class="line">hexo clean # 清除缓存</span><br><span class="line">hexo new &quot;文件标题&quot; # 创建新文章</span><br></pre></td></tr></table></figure><p>网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><p>注意：冒号后要加一个空格！</p><h3 id="7、域名解析和注册"><a href="#7、域名解析和注册" class="headerlink" title="7、域名解析和注册"></a>7、域名解析和注册</h3><p>（有时间再补这部分的内容）</p><h3 id="8、补充"><a href="#8、补充" class="headerlink" title="8、补充"></a>8、补充</h3><p>1、当想在笔记中添加本地图片的时候还得安装一个图片插件<code>npm install hexo-renderer-marked</code>,然后更改_config.yaml如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>之后就可以使用![](image.jpg)的方式愉快的插入图片了，在笔记中正常引用，不需要写相对或者绝对地址。<br><strong>Tips</strong>:每次发布之前或修改之后使用<code>hexo clean</code>清除一下</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
